{% extends '::crud_page.html.twig' %}

{% block content %}
    <div class="twelve wide column">
        <h1 class="ui header">{{ "Редактирование типа объекта"|trans }}</h1>
        {{ form(form) }}
        <a class="ui left floated button primary" href="{{ path('builder_add_types') }}"
           title="{{ "Перейти к списку объектов этого типа"|trans }}">Назад</a>
        <a class="ui left floated button" href="{{ path('builder_edit_type_fields', {'id':entityType.id}) }}"
           title="{{ "Перейти редактированию полей этого типа"|trans }}"><i class="list icon"></i>Редактирование
            полей</a>
        {{ form(delete_form) }}
    </div>
{% endblock %}


{% block javascripts %}
    {{ parent() }}
    <script>
        $(document).ready(function () {
            let parentsDropdown = $('.f-hasParents');
            let requiredsDropdown = $('.f-requiredParents');
            let $menu = requiredsDropdown.find('.menu');
            // onchange of parents dropdown clear and change possible values of required parent types dropdown
            parentsDropdown.dropdown('setting', 'onChange', function (value, text, $selectedItem) {
                requiredsDropdown.dropdown('clear');
                requiredsDropdown.dropdown('clear');
                if ($selectedItem) {
                    refreshReqiredItems();
                }
            });

            // actually works with screeching a bit
            function refreshReqiredItems() {
                $menu.empty();
                let vals = parentsDropdown.dropdown('get value').split('|^');
                let currentValsStruct = [];
                // collect selected items
                for (let val in vals) {
                    if (vals.hasOwnProperty(val)) {
                        let label = parentsDropdown.dropdown('get item', vals[val]);
                        if (label !== false) {
                            currentValsStruct.push({'label': label.text(), 'value': vals[val]});
                        }
                    }
                }

                // append new option to menu
                for (let newItem in currentValsStruct) {
                    $menu.append(`<div class="item" data-value="${currentValsStruct[newItem].value}">${currentValsStruct[newItem].label}</div>`);
                }
                requiredsDropdown.dropdown('refresh');
            }

            // whoosh!
            refreshReqiredItems();
            requiredsDropdown.dropdown('restore default value');
        });
    </script>
{% endblock %}